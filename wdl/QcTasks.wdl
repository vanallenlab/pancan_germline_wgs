# The Germline Genomics of Cancer (G2C)
# Copyright (c) 2025-Present, Ryan L. Collins and the Dana-Farber Cancer Institute
# Contact: Ryan Collins <Ryan_Collins@dfci.harvard.edu>
# Distributed under the terms of the GNU GPL v2.0

# Generic WDL tasks used for VCF quality control


version 1.0


task CollectSiteMetrics {
  input {
    File vcf
    File vcf_idx

    Int n_samples

    Float? min_af_bin
    Float? common_af_cutoff

    String g2c_analysis_docker
  }

  String out_prefix = basename(vcf, ".vcf.gz")
  Int disk_gb = ceil(2 * size(vcf, "GB")) + 10

  String min_af_cmd = if defined(min_af_bin) then "--min-af-bin ~{min_af_bin}" else ""
  String common_cmd = if defined(common_af_cutoff) then "--common-af ~{common_af_cutoff}" else ""

  command <<<
    set -eu -o pipefail

    # Ensure all necessary fields are defined in VCF header
    echo "##INFO=<ID=SVLEN,Number=1,Type=Integer,Description=\"Length\">" > header.supp.vcf
    echo "##INFO=<ID=CN_NONREF_FREQ,Number=1,Type=Float,Description=\"CNV frequency\">" >> header.supp.vcf
    echo "##INFO=<ID=CN_NONREF_COUNT,Number=1,Type=Integer,Description=\"Nondip count.\">" >> header.supp.vcf
    echo "##INFO=<ID=HWE,Number=A,Type=Float,Description=\"HWE test\">" >> header.supp.vcf
    echo "##INFO=<ID=ExcHet,Number=A,Type=Float,Description=\"ExcHet test\">" >> header.supp.vcf

    # Collect stats and split into SNV, indel, and SV files
    bcftools annotate -h header.supp.vcf ~{vcf} \
    | bcftools query \
      -f '%CHROM\t%POS\t%END\t%REF\t%ALT\t%INFO/SVLEN\t%INFO/AN\t%INFO/AC\t%INFO/AF\t%INFO/CN_NONREF_COUNT\t%INFO/CN_NONREF_FREQ\t%INFO/AC_Het\t%INFO/AC_Hom\t%INFO/AC_Hemi\t%INFO/HWE\n' \
    | /opt/pancan_germline_wgs/scripts/qc/vcf_qc/clean_site_metrics.py \
      ~{min_af_cmd} \
      ~{common_cmd} \
      -o ~{out_prefix} \
      --gzip \
      -N ~{n_samples}
  >>>

  output {
    File? snv_sites = out_prefix + ".snv.sites.bed.gz"
    File? snv_sites_idx = out_prefix + ".snv.sites.bed.gz.tbi"
    File? indel_sites = out_prefix + ".indel.sites.bed.gz"
    File? indel_sites_idx = out_prefix + ".indel.sites.bed.gz.tbi"
    File? sv_sites = out_prefix + ".sv.sites.bed.gz"
    File? sv_sites_idx = out_prefix + ".sv.sites.bed.gz.tbi"
    File? common_snv_sites = out_prefix + ".snv.sites.common.bed.gz"
    File? common_snv_sites_idx = out_prefix + ".snv.sites.common.bed.gz.tbi"
    File? common_indel_sites = out_prefix + ".indel.sites.common.bed.gz"
    File? common_indel_sites_idx = out_prefix + ".indel.sites.common.bed.gz.tbi"
    File? common_sv_sites = out_prefix + ".sv.sites.common.bed.gz"
    File? common_sv_sites_idx = out_prefix + ".sv.sites.common.bed.gz.tbi"
    File size_distrib = out_prefix + ".size_distrib.tsv.gz"
    File af_distrib = out_prefix + ".af_distrib.tsv.gz"
    File size_vs_af_distrib = out_prefix + ".size_vs_af_distrib.tsv.gz"
  }

  runtime {
    docker: g2c_analysis_docker
    memory: "3.5 GB"
    cpu: 2
    disks: "local-disk " + disk_gb + " HDD"
    preemptible: 3
    max_retries: 1
  }
}


# Sum one or more compressed distributions generated by CollectSiteMetrics
task SumCompressedDistribs {
  input {
    Array[File] distrib_tsvs
    Int n_key_columns = 2
    String out_prefix
    String g2c_analysis_docker
  }

  Int disk_gb = ceil(1.5 * size(distrib_tsvs, "GB")) + 10

  command <<<
    set -eu -o pipefail
    
    /opt/pancan_germline_wgs/scripts/qc/vcf_qc/sum_compressed_distribs.py \
      -o "~{out_prefix}.merged.tsv" \
      -k ~{n_key_columns} \
      ~{sep=" " distrib_tsvs}
    gzip -f "~{out_prefix}.merged.tsv"
  >>>

  output {
    File merged_distrib = "~{out_prefix}.merged.tsv.gz"
  }

  runtime {
    docker: g2c_analysis_docker
    memory: "1.75 GB"
    cpu: 1
    disks: "local-disk " + disk_gb + " HDD"
    preemptible: 3
    max_retries: 1
  }
}

