#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# The Germline Genomics of Cancer (G2C)
# Copyright (c) 2025-Present, Ryan L. Collins and the Dana-Farber Cancer Institute
# Contact: Ryan Collins <Ryan_Collins@dfci.harvard.edu>
# Distributed under the terms of the GNU GPL v2.0

"""
Cleans non-reference sample genotypes and optionally gathers distributions by sample
"""


import argparse
import csv
import gzip
import pandas as pd
from g2cpy import classify_variant, determine_filetype
from sys import stdin, stdout


def main():
    """
    Main block
    """
    parser = argparse.ArgumentParser(
             description=__doc__,
             formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-i', '--input', default='stdin', metavar='.tsv',
                        help='Tab-separated file with sample ID, variant ID, ' +
                        'GT, and RD_CN [default: stdin]')
    parser.add_argument('-o', '--output', default='stdout', metavar='.tsv',
                        help='Tab-separated file of sample ID, variant ID, ' +
                        'and cleaned GT [default: stdout]')
    parser.add_argument('--site-metrics', metavar='.bed', help='Optional ' +
                        '.bed file of variant metrics generated by ' +
                        'CollectSiteMetrics. Must be specified with --distrib-out')
    parser.add_argument('--distrib-out', metavar='.tsv', help='Optional output ' +
                        '.tsv of compressed genotype distributions per sample. ' +
                        'Will only be generated if --site-metrics are provided.')
    args = parser.parse_args()

    # Load site metrics into memory, if provided
    if args.site_metrics is not None:
        # TODO: implement this
        import pdb; pdb.set_trace()
    else:
        site_metrics = None

    # Open connection to input file
    if args.input in '- stdin /dev/stdin'.split():
        fin = stdin
    elif 'compressed' in determine_filetype(args.input):
        fin = gzip.open(args.input, 'rt')
    else:
        fin = open(args.input)
    indat = csv.reader(fin, delimiter='\t')

    # Open connection to output file(s)
    if args.output in '- stdout /dev/stdout'.split():
        fout = stdout
    elif 'compressed' in determine_filetype(args.output):
        fout = gzip.open(args.output, 'wt')
    else:
        fout = open(args.input, 'w')

    # Processes each line in serial
    for sid, vid, gt, cn in indat:
        # Clean GT + CN
        import pdb; pdb.set_trace()

        # Write to --output

    # Close input handle to clear buffer
    indat.close()

    # If optioned, write compressed distributions to --distrib-out
    # TODO: implement this


if __name__ == '__main__':
    main()

