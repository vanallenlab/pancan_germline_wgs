#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# The Germline Genomics of Cancer (G2C)
# Copyright (c) 2025-Present, Ryan L. Collins and the Dana-Farber Cancer Institute
# Contact: Ryan Collins <Ryan_Collins@dfci.harvard.edu>
# Distributed under the terms of the GNU GPL v2.0

"""
Identify concerning intervals from site benchmarking results
"""


import argparse
import pybedtools as pbt
from g2cpy import bgzip, determine_filetype
from os import path


def main():
    """
    Main block
    """
    parser = argparse.ArgumentParser(
             description=__doc__,
             formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('bed_in', metavar='.bed', help='Input .bed generated by compare_sites.py')
    parser.add_argument('bed_out', metavar='.bed', help='Output .bed of problematic intervals')
    parser.add_argument('--min-vars', type=int, default=10, metavar='int', 
                        help='Minimum number of consecutive false positives before reporting problematic interval [default: 10]')
    parser.add_argument('--min-bp', type=int, default=10000, metavar='int', 
                        help='Minimum run of consecutive false positives in reference base pairs before reporting problematic interval [default: 10kb]')
    args = parser.parse_args()

    # Parse suffix on output file
    if 'compressed' in determine_filetype(args.bed_out):
        bgzip_out = True
        out_fn = path.splitext(args.bed_out)[0]
    else:
        bgzip_out = False
        out_fn = args.bed_out

    # Initialize counters
    last_fp_pos, n_fp, bp_span = 0, 0, 0
    bad_ints = []
    last_chrom = None

    # Iterate over all results from benchmarking
    for rec in pbt.BedTool(args.bed_in):
        
        # Set chromosome at initialization
        if last_chrom is None:
            last_chrom = rec.chrom

        # Reset tracker at the start of each chromosome
        if last_chrom != rec.chrom:
            last_fp_pos = 0
            n_fp, bp_span = 0, 0

        # Check if false positive
        if rec.fields[8] == 'NA':
            n_fp += 1
            bp_span = rec.start - last_fp_pos

        else:
            # Each time we encounter a true positive, check whether there's an interval to emit
            if n_fp > args.min_vars and bp_span > args.min_bp:
                int_vals = [last_chrom, last_fp_pos, rec.start - 1, n_fp]
                bad_ints.append('\t'.join([str(x) for x in int_vals]))

            # Reset interval tracker
            # Last FP position must be at least one greater than current position
            last_fp_pos = rec.start + 1
            n_fp, bp_span = 0, 0

        # Update chromosome tracker
        last_chrom = rec.chrom

    # Write bad intervals to file
    pbt.BedTool('\n'.join(bad_ints), from_string=True).sort().\
        saveas(out_fn, trackline='\t'.join('#chrom start end n_fp'.split()))
    if bgzip_out:
        bgzip(out_fn)


if __name__ == '__main__':
    main()

