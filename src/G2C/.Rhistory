# Major NAs will be dropped outright
drop.idx <- is.na(major.values)
if(any(drop.idx)){
major.values <- major.values[-which(drop.idx)]
minor.values <- minor.values[-which(drop.idx)]
}
# Organize plot data
major.table <- sort(table(major.values), decreasing=TRUE)
minor.table <- table(sort(minor.values))
plot.df <- do.call("rbind", lapply(names(major.table), function(major){
sapply(names(minor.table), function(minor){
length(which(major.values == major & minor.values == minor))
})
}))
rownames(plot.df) <- names(major.table)
bar.hex <- min(c(bar.hex, 1))
# Handle color assignment
if(is.null(minor.colors)){
minor.colors <- colorRampPalette(c("black", "white"))(length(minor.table) + 2)[-c(1, length(minor.table) + 2)]
names(minor.colors) <- names(minor.table)
}
# Prepare plot area
xlims <- c(0, max(major.table))
ylims <- c(length(major.table), 0)
if(orient == "left"){
xlims <- rev(xlims)
ylims <- rev(ylims)
}
prep.plot.area(xlims, ylims, parmar=parmar)
axis(if(orient == "left"){4}else{2},
at=(1:nrow(plot.df)) - 0.5, tick=F, las=2, cex.axis=y.label.cex,
labels=rownames(plot.df), line=-0.9)
clean.axis(if(orient == "left"){1}else{3}, label.units="count",
infinite.positive=TRUE, title=x.title, title.line=0.3)
# Add bars
r.bar <- bar.hex / 2
sapply(1:nrow(major.table), function(major.idx){
rect(xleft=c(0, cumsum(plot.df[major.idx, ]))[-(ncol(plot.df)+1)],
xright=cumsum(plot.df[major.idx, ]),
ybottom=major.idx - 0.5 - r.bar,
ytop=major.idx -0.5 + r.bar,
col=minor.colors[colnames(plot.df)],
border=NA, bty="n")
rect(xleft=0, xright=major.table[major.idx],
ybottom=major.idx - 0.5 - r.bar,
ytop=major.idx -0.5 + r.bar,
col=NA, xpd=T)
})
# Add legend, if optioned
if(add.legend){
legend.colors <- minor.colors[intersect(names(sort(-minor.table)), names(minor.colors))]
legend(x=par("usr")[if(orient == "left"){1}else{2}] + (legend.xadj * diff(par("usr")[1:2])),
y=par("usr")[if(orient == "left"){4}else{3}],
names(legend.colors), fill=legend.colors, cex=5/6, bty="n")
}
# Add count labels, if optioned
if(annotate.counts){
bar.ends <- apply(plot.df, 1, sum, na.rm=T)
text(x=bar.ends + (end.label.xadj * diff(par("usr")[1:2])),
y=(1:nrow(plot.df)) - 0.5,
labels=prettyNum(bar.ends, big.mark=","),
cex=5/6, pos=if(orient == "left"){2}else{4}, xpd=T)
}
}
stacked.barplot(cancer.names[qc.df$cancer],
cohort.names.short[qc.df$simple_cohort],
x.title="Samples", annotate.counts=TRUE,
parmar=bar.parmar)
stacked.barplot(cohort.names.short[qc.df$simple_cohort],
cancer.names[qc.df$cancer],
minor.colors=minor.colors, x.title="Samples",
annotate.counts=TRUE, orient="left",
parmar=bar.parmar[c(3, 4, 1, 2)])
#' vector elements map onto all unique values of `minor.values`
#'
#' @examples
#' set.seed(2024)
#' x <- sample(1:5, 100, replace=TRUE)
#' y <- sample(letters[1:4], 100, replace=TRUE)
#' stacked.barplot(x, y)
#'
#' @export stacked.barplot
#' @export
stacked.barplot <- function(major.values, minor.values, minor.colors=NULL,
x.title=NULL, y.label.cex=5/6, bar.hex=0.8,
add.legend=TRUE, legend.xadj=-0.15,
annotate.counts=FALSE, end.label.xadj=-0.025,
orient="right", parmar=c(0.5, 3, 2.5, 0.5)){
# Handle NAs
# Minor NAs will be filled
minor.values[which(is.na(minor.values))] <- "N.S."
# Major NAs will be dropped outright
drop.idx <- is.na(major.values)
if(any(drop.idx)){
major.values <- major.values[-which(drop.idx)]
minor.values <- minor.values[-which(drop.idx)]
}
# Organize plot data
major.table <- sort(table(major.values), decreasing=TRUE)
minor.table <- table(sort(minor.values))
plot.df <- do.call("rbind", lapply(names(major.table), function(major){
sapply(names(minor.table), function(minor){
length(which(major.values == major & minor.values == minor))
})
}))
rownames(plot.df) <- names(major.table)
bar.hex <- min(c(bar.hex, 1))
# Handle color assignment
if(is.null(minor.colors)){
minor.colors <- colorRampPalette(c("black", "white"))(length(minor.table) + 2)[-c(1, length(minor.table) + 2)]
names(minor.colors) <- names(minor.table)
}
# Prepare plot area
xlims <- c(0, max(major.table))
ylims <- c(length(major.table), 0)
if(orient == "left"){
xlims <- rev(xlims)
ylims <- rev(ylims)
}
prep.plot.area(xlims, ylims, parmar=parmar)
axis(if(orient == "left"){4}else{2},
at=(1:nrow(plot.df)) - 0.5, tick=F, las=2, cex.axis=y.label.cex,
labels=rownames(plot.df), line=-0.9)
clean.axis(if(orient == "left"){1}else{3}, label.units="count",
infinite.positive=TRUE, title=x.title, title.line=0.3)
# Add bars
r.bar <- bar.hex / 2
sapply(1:nrow(major.table), function(major.idx){
rect(xleft=c(0, cumsum(plot.df[major.idx, ]))[-(ncol(plot.df)+1)],
xright=cumsum(plot.df[major.idx, ]),
ybottom=major.idx - 0.5 - r.bar,
ytop=major.idx -0.5 + r.bar,
col=minor.colors[colnames(plot.df)],
border=NA, bty="n")
rect(xleft=0, xright=major.table[major.idx],
ybottom=major.idx - 0.5 - r.bar,
ytop=major.idx -0.5 + r.bar,
col=NA, xpd=T)
})
# Add legend, if optioned
if(add.legend){
legend.colors <- minor.colors[intersect(names(sort(-minor.table)), names(minor.colors))]
legend(x=par("usr")[if(orient == "left"){1}else{2}] + (legend.xadj * diff(par("usr")[1:2])),
y=par("usr")[if(orient == "left"){4}else{3}],
names(legend.colors), fill=legend.colors, cex=5/6, bty="n", xpd=T)
}
# Add count labels, if optioned
if(annotate.counts){
bar.ends <- apply(plot.df, 1, sum, na.rm=T)
text(x=bar.ends + (end.label.xadj * diff(par("usr")[1:2])),
y=(1:nrow(plot.df)) - 0.5,
labels=prettyNum(bar.ends, big.mark=","),
cex=5/6, pos=if(orient == "left"){2}else{4}, xpd=T)
}
}
stacked.barplot(cancer.names[qc.df$cancer],
cohort.names.short[qc.df$simple_cohort],
x.title="Samples", annotate.counts=TRUE,
parmar=bar.parmar)
stacked.barplot(cohort.names.short[qc.df$simple_cohort],
cancer.names[qc.df$cancer],
minor.colors=minor.colors, x.title="Samples",
annotate.counts=TRUE, orient="left",
parmar=bar.parmar[c(3, 4, 1, 2)])
# Barplot of samples per cancer, colored by cohort
pdf(paste(args$out_prefix, "cohort_contributions_per_cancer", "pdf", sep="."),
height=bar.pdf.dims[1], width=bar.pdf.dims[2])
stacked.barplot(cancer.names[qc.df$cancer],
cohort.names.short[qc.df$simple_cohort],
x.title="Samples", annotate.counts=TRUE,
parmar=bar.parmar)
dev.off()
# Barplot of samples by cohort, colored by cancer
pdf(paste(args$out_prefix, "cancers_per_cohort", "pdf", sep="."),
height=bar.pdf.dims[1], width=bar.pdf.dims[2])
minor.colors <- cancer.colors
names(minor.colors) <- cancer.names[names(cancer.colors)]
stacked.barplot(cohort.names.short[qc.df$simple_cohort],
cancer.names[qc.df$cancer],
minor.colors=minor.colors, x.title="Samples",
annotate.counts=TRUE, orient="left",
parmar=bar.parmar[c(3, 4, 1, 2)])
dev.off()
#' vector elements map onto all unique values of `minor.values`
#'
#' @examples
#' set.seed(2024)
#' x <- sample(1:5, 100, replace=TRUE)
#' y <- sample(letters[1:4], 100, replace=TRUE)
#' stacked.barplot(x, y)
#'
#' @export stacked.barplot
#' @export
stacked.barplot <- function(major.values, minor.values, minor.colors=NULL,
x.title=NULL, y.label.cex=5/6, bar.hex=0.8,
add.legend=TRUE, legend.xadj=-0.15,
annotate.counts=FALSE, end.label.xadj=-0.025,
orient="right", parmar=c(0.5, 3, 2.5, 0.5)){
# Handle NAs
# Minor NAs will be filled
minor.values[which(is.na(minor.values))] <- "N.S."
# Major NAs will be dropped outright
drop.idx <- is.na(major.values)
if(any(drop.idx)){
major.values <- major.values[-which(drop.idx)]
minor.values <- minor.values[-which(drop.idx)]
}
# Organize plot data
major.table <- sort(table(major.values), decreasing=TRUE)
minor.table <- table(sort(minor.values))
plot.df <- do.call("rbind", lapply(names(major.table), function(major){
sapply(names(minor.table), function(minor){
length(which(major.values == major & minor.values == minor))
})
}))
rownames(plot.df) <- names(major.table)
bar.hex <- min(c(bar.hex, 1))
# Handle color assignment
if(is.null(minor.colors)){
minor.colors <- colorRampPalette(c("black", "white"))(length(minor.table) + 2)[-c(1, length(minor.table) + 2)]
names(minor.colors) <- names(minor.table)
}
# Prepare plot area
xlims <- c(0, max(major.table))
ylims <- c(length(major.table), 0)
if(orient == "left"){
xlims <- rev(xlims)
ylims <- rev(ylims)
}
prep.plot.area(xlims, ylims, parmar=parmar)
axis(if(orient == "left"){4}else{2},
at=(1:nrow(plot.df)) - 0.5, tick=F, las=2, cex.axis=y.label.cex,
labels=rownames(plot.df), line=-0.9)
clean.axis(if(orient == "left"){1}else{3}, label.units="count",
infinite.positive=TRUE, title=x.title, title.line=0.3)
# Add bars
r.bar <- bar.hex / 2
sapply(1:nrow(major.table), function(major.idx){
rect(xleft=c(0, cumsum(plot.df[major.idx, ]))[-(ncol(plot.df)+1)],
xright=cumsum(plot.df[major.idx, ]),
ybottom=major.idx - 0.5 - r.bar,
ytop=major.idx -0.5 + r.bar,
col=minor.colors[colnames(plot.df)],
border=NA, bty="n")
rect(xleft=0, xright=major.table[major.idx],
ybottom=major.idx - 0.5 - r.bar,
ytop=major.idx -0.5 + r.bar,
col=NA, xpd=T)
})
# Add legend, if optioned
if(add.legend){
legend.colors <- minor.colors[intersect(names(sort(-minor.table)), names(minor.colors))]
if(orient == "left"){
legend(x=par("usr")[1] + (legend.xadj * diff(par("usr")[1:2]))),
#' vector elements map onto all unique values of `minor.values`
#'
#' @examples
#' set.seed(2024)
#' x <- sample(1:5, 100, replace=TRUE)
#' y <- sample(letters[1:4], 100, replace=TRUE)
#' stacked.barplot(x, y)
#'
#' @export stacked.barplot
#' @export
stacked.barplot <- function(major.values, minor.values, minor.colors=NULL,
x.title=NULL, y.label.cex=5/6, bar.hex=0.8,
add.legend=TRUE, legend.xadj=-0.15,
annotate.counts=FALSE, end.label.xadj=-0.025,
orient="right", parmar=c(0.5, 3, 2.5, 0.5)){
# Handle NAs
# Minor NAs will be filled
minor.values[which(is.na(minor.values))] <- "N.S."
# Major NAs will be dropped outright
drop.idx <- is.na(major.values)
if(any(drop.idx)){
major.values <- major.values[-which(drop.idx)]
minor.values <- minor.values[-which(drop.idx)]
}
# Organize plot data
major.table <- sort(table(major.values), decreasing=TRUE)
minor.table <- table(sort(minor.values))
plot.df <- do.call("rbind", lapply(names(major.table), function(major){
sapply(names(minor.table), function(minor){
length(which(major.values == major & minor.values == minor))
})
}))
rownames(plot.df) <- names(major.table)
bar.hex <- min(c(bar.hex, 1))
# Handle color assignment
if(is.null(minor.colors)){
minor.colors <- colorRampPalette(c("black", "white"))(length(minor.table) + 2)[-c(1, length(minor.table) + 2)]
names(minor.colors) <- names(minor.table)
}
# Prepare plot area
xlims <- c(0, max(major.table))
ylims <- c(length(major.table), 0)
if(orient == "left"){
xlims <- rev(xlims)
ylims <- rev(ylims)
}
prep.plot.area(xlims, ylims, parmar=parmar)
axis(if(orient == "left"){4}else{2},
at=(1:nrow(plot.df)) - 0.5, tick=F, las=2, cex.axis=y.label.cex,
labels=rownames(plot.df), line=-0.9)
clean.axis(if(orient == "left"){1}else{3}, label.units="count",
infinite.positive=TRUE, title=x.title, title.line=0.3)
# Add bars
r.bar <- bar.hex / 2
sapply(1:nrow(major.table), function(major.idx){
rect(xleft=c(0, cumsum(plot.df[major.idx, ]))[-(ncol(plot.df)+1)],
xright=cumsum(plot.df[major.idx, ]),
ybottom=major.idx - 0.5 - r.bar,
ytop=major.idx -0.5 + r.bar,
col=minor.colors[colnames(plot.df)],
border=NA, bty="n")
rect(xleft=0, xright=major.table[major.idx],
ybottom=major.idx - 0.5 - r.bar,
ytop=major.idx -0.5 + r.bar,
col=NA, xpd=T)
})
# Add legend, if optioned
if(add.legend){
legend.colors <- minor.colors[intersect(names(sort(-minor.table)), names(minor.colors))]
if(orient == "left"){
legend(x=par("usr")[1] + (legend.xadj * diff(par("usr")[1:2])),
y=par("usr")[4],
names(legend.colors), fill=legend.colors, cex=5/6, bty="n", xpd=T)
}else{
legend("bottomright", names(legend.colors), fill=legend.colors,
cex=5/6, bty="n", xpd=T)
}
}
# Add count labels, if optioned
if(annotate.counts){
bar.ends <- apply(plot.df, 1, sum, na.rm=T)
text(x=bar.ends + (end.label.xadj * diff(par("usr")[1:2])),
y=(1:nrow(plot.df)) - 0.5,
labels=prettyNum(bar.ends, big.mark=","),
cex=5/6, pos=if(orient == "left"){2}else{4}, xpd=T)
}
}
stacked.barplot(cancer.names[qc.df$cancer],
cohort.names.short[qc.df$simple_cohort],
x.title="Samples", annotate.counts=TRUE,
parmar=bar.parmar)
stacked.barplot(cohort.names.short[qc.df$simple_cohort],
cancer.names[qc.df$cancer],
minor.colors=minor.colors, x.title="Samples",
annotate.counts=TRUE, orient="left",
parmar=bar.parmar[c(3, 4, 1, 2)])
# Barplot of samples per cancer, colored by cohort
pdf(paste(args$out_prefix, "cohort_contributions_per_cancer", "pdf", sep="."),
height=bar.pdf.dims[1], width=bar.pdf.dims[2])
stacked.barplot(cancer.names[qc.df$cancer],
cohort.names.short[qc.df$simple_cohort],
x.title="Samples", annotate.counts=TRUE,
parmar=bar.parmar)
dev.off()
# Barplot of samples by cohort, colored by cancer
pdf(paste(args$out_prefix, "cancers_per_cohort", "pdf", sep="."),
height=bar.pdf.dims[1], width=bar.pdf.dims[2])
minor.colors <- cancer.colors
names(minor.colors) <- cancer.names[names(cancer.colors)]
stacked.barplot(cohort.names.short[qc.df$simple_cohort],
cancer.names[qc.df$cancer],
minor.colors=minor.colors, x.title="Samples",
annotate.counts=TRUE, orient="left",
parmar=bar.parmar[c(3, 4, 1, 2)])
dev.off()
stacked.barplot <- function(major.values, minor.values, minor.colors=NULL,
x.title=NULL, y.label.cex=5/6, bar.hex=0.8,
add.legend=TRUE, legend.xadj=-0.075,
annotate.counts=FALSE, end.label.xadj=-0.025,
orient="right", parmar=c(0.5, 3, 2.5, 0.5)){
# Handle NAs
# Minor NAs will be filled
minor.values[which(is.na(minor.values))] <- "N.S."
# Major NAs will be dropped outright
drop.idx <- is.na(major.values)
if(any(drop.idx)){
major.values <- major.values[-which(drop.idx)]
minor.values <- minor.values[-which(drop.idx)]
}
# Organize plot data
major.table <- sort(table(major.values), decreasing=TRUE)
minor.table <- table(sort(minor.values))
plot.df <- do.call("rbind", lapply(names(major.table), function(major){
sapply(names(minor.table), function(minor){
length(which(major.values == major & minor.values == minor))
})
}))
rownames(plot.df) <- names(major.table)
bar.hex <- min(c(bar.hex, 1))
# Handle color assignment
if(is.null(minor.colors)){
minor.colors <- colorRampPalette(c("black", "white"))(length(minor.table) + 2)[-c(1, length(minor.table) + 2)]
names(minor.colors) <- names(minor.table)
}
# Prepare plot area
xlims <- c(0, max(major.table))
ylims <- c(length(major.table), 0)
if(orient == "left"){
xlims <- rev(xlims)
ylims <- rev(ylims)
}
prep.plot.area(xlims, ylims, parmar=parmar)
axis(if(orient == "left"){4}else{2},
at=(1:nrow(plot.df)) - 0.5, tick=F, las=2, cex.axis=y.label.cex,
labels=rownames(plot.df), line=-0.9)
clean.axis(if(orient == "left"){1}else{3}, label.units="count",
infinite.positive=TRUE, title=x.title, title.line=0.3)
# Add bars
r.bar <- bar.hex / 2
sapply(1:nrow(major.table), function(major.idx){
rect(xleft=c(0, cumsum(plot.df[major.idx, ]))[-(ncol(plot.df)+1)],
xright=cumsum(plot.df[major.idx, ]),
ybottom=major.idx - 0.5 - r.bar,
ytop=major.idx -0.5 + r.bar,
col=minor.colors[colnames(plot.df)],
border=NA, bty="n")
rect(xleft=0, xright=major.table[major.idx],
ybottom=major.idx - 0.5 - r.bar,
ytop=major.idx -0.5 + r.bar,
col=NA, xpd=T)
})
# Add legend, if optioned
if(add.legend){
legend.colors <- minor.colors[intersect(names(sort(-minor.table)), names(minor.colors))]
if(orient == "left"){
legend(x=par("usr")[1] + (legend.xadj * diff(par("usr")[1:2])),
y=par("usr")[4],
names(legend.colors), fill=legend.colors, cex=5/6, bty="n", xpd=T)
}else{
legend("bottomright", names(legend.colors), fill=legend.colors,
cex=5/6, bty="n", xpd=T)
}
}
# Add count labels, if optioned
if(annotate.counts){
bar.ends <- apply(plot.df, 1, sum, na.rm=T)
text(x=bar.ends + (end.label.xadj * diff(par("usr")[1:2])),
y=(1:nrow(plot.df)) - 0.5,
labels=prettyNum(bar.ends, big.mark=","),
cex=5/6, pos=if(orient == "left"){2}else{4}, xpd=T)
}
}
stacked.barplot(cohort.names.short[qc.df$simple_cohort],
cancer.names[qc.df$cancer],
minor.colors=minor.colors, x.title="Samples",
annotate.counts=TRUE, orient="left", legend.xadj=-0.2,
parmar=bar.parmar[c(3, 4, 1, 2)])
pdf(paste(args$out_prefix, "cancers_per_cohort", "pdf", sep="."),
height=bar.pdf.dims[1], width=bar.pdf.dims[2])
minor.colors <- cancer.colors
names(minor.colors) <- cancer.names[names(cancer.colors)]
stacked.barplot(cohort.names.short[qc.df$simple_cohort],
cancer.names[qc.df$cancer],
minor.colors=minor.colors, x.title="Samples",
annotate.counts=TRUE, orient="left", legend.xadj=-0.2,
parmar=bar.parmar[c(3, 4, 1, 2)])
dev.off()
pdf(paste(args$out_prefix, "cancers_per_cohort", "pdf", sep="."),
height=bar.pdf.dims[1], width=bar.pdf.dims[2])
minor.colors <- cancer.colors
names(minor.colors) <- cancer.names[names(cancer.colors)]
stacked.barplot(cohort.names.short[qc.df$simple_cohort],
cancer.names[qc.df$cancer],
minor.colors=minor.colors, x.title="Samples",
annotate.counts=TRUE, orient="left", legend.xadj=-0.3,
parmar=bar.parmar[c(3, 4, 1, 2)])
dev.off()
# Barplot of samples per cancer, colored by cohort
pdf(paste(args$out_prefix, "cohort_contributions_per_cancer", "pdf", sep="."),
height=bar.pdf.dims[1], width=bar.pdf.dims[2])
stacked.barplot(cancer.names[qc.df$cancer],
cohort.names.short[qc.df$simple_cohort],
x.title="Samples", annotate.counts=TRUE,
parmar=bar.parmar)
dev.off()
# Barplot of samples by cohort, colored by cancer
pdf(paste(args$out_prefix, "cancers_per_cohort", "pdf", sep="."),
height=bar.pdf.dims[1], width=bar.pdf.dims[2])
minor.colors <- cancer.colors
names(minor.colors) <- cancer.names[names(cancer.colors)]
stacked.barplot(cohort.names.short[qc.df$simple_cohort],
cancer.names[qc.df$cancer],
minor.colors=minor.colors, x.title="Samples",
annotate.counts=TRUE, orient="left", legend.xadj=-0.3,
parmar=bar.parmar[c(3, 4, 1, 2)])
dev.off()
# Set shared barplot parameters
bar.parmar <- c(0.5, 4, 2.5, 2.75)
bar.pdf.dims <- c(5, 3)
# Barplot of samples per cancer, colored by cohort
pdf(paste(args$out_prefix, "cohort_contributions_per_cancer", "pdf", sep="."),
height=bar.pdf.dims[1], width=bar.pdf.dims[2])
stacked.barplot(cancer.names[qc.df$cancer],
cohort.names.short[qc.df$simple_cohort],
x.title="Samples", annotate.counts=TRUE,
parmar=bar.parmar)
dev.off()
# Barplot of samples by cohort, colored by cancer
pdf(paste(args$out_prefix, "cancers_per_cohort", "pdf", sep="."),
height=bar.pdf.dims[1], width=bar.pdf.dims[2])
minor.colors <- cancer.colors
names(minor.colors) <- cancer.names[names(cancer.colors)]
stacked.barplot(cohort.names.short[qc.df$simple_cohort],
cancer.names[qc.df$cancer],
minor.colors=minor.colors, x.title="Samples",
annotate.counts=TRUE, orient="left", legend.xadj=-0.3,
parmar=bar.parmar[c(3, 4, 1, 2)])
dev.off()
