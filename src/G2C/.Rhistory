df <- read.table(tsv.in, sep="\t", comment.char="#", quote="", header=T, blank.lines.skip=T, check.names=F, fill=T)
head(df)
# Read data
df <- read.table(tsv.in, sep="\t", comment.char="#", quote="", header=T, blank.lines.skip=T, check.names=F, fill=T, na.strings="")
head(df)
# Read data
df <- read.table(tsv.in, sep="\t", comment.char="#", quote="", header=T, blank.lines.skip=T, check.names=F, fill=T, na.strings=c("", "NA"))
head(df)
head(df[, 1:10])
tail(df[, 1:10])
"GTEX-1A8FM" %in% df$SUBJID
# Reformat simple columns
df$Sample <- df$SUBJID
df$Cohort <- "gtex"
# Declare constants used in variable parsing
sex.map <- c("1" = "male",
"2" = "female")
df$reported_sex <- remap(df$SEX, sex.map, default.value=NA)
table(df$reported_sex)
df$RACE
df$ETHNCTY
race.map <- c("1" = "asian",
"2" = "black",
"3" = "white",
"4" = "native_american")
df$race <- remap(df$RACE, race.map, default.value="unknown")
eth.map <- c("0" = "not_hispanic",
"1" = "hispanic")
df$eth <- remap(df$ETHNCTY, eth.map, default.value=NA)
df$roe <- apply(df[, c("race", "eth")], 1, paste, collapse="_")
table(df$roe)
df$roe <- gsub("_NA$", "", apply(df[, c("race", "eth")], 1, paste, collapse="_"))
df$roe
table(df$roe)
df$reported_race_or_ethnicity <- gsub("^unknown_", "", df$roe)
table(df$reported_race_or_ethnicity)
df$age <- as.numeric(df$AGE)
hist(df$age)
df$birth_year <- NA
df[1, ]
df$DTHTIME
df$birth_year <- NA
df$vital_status <- 0
df$age_at_last_contact <- df$age <- as.numeric(df$AGE)
df$years_to_last_contact <- NA
df$HEIGHT
df$HGHT
df$height <- 2.54 * df$HGHT
df$WGHT
df$weight <- 0.453592 * df$WGHT
hist(df$height)
hist(df$weight)
df$BMI
df$bmi <- df$BMI
any.cancer <- which(df$cancer != "control" & !is.na(df$cancer))
# Read data
df <- read.table(tsv.in, sep="\t", comment.char="#", quote="", header=T,
blank.lines.skip=T, check.names=F, fill=T,
na.strings=c("", "NA"))
# Reformat simple columns
df$Sample <- df$SUBJID
df$Cohort <- "gtex"
df$reported_sex <- remap(df$SEX, sex.map, default.value=NA)
df$age_at_last_contact <- df$age <- as.numeric(df$AGE)
df$birth_year <- NA
df$vital_status <- 0
df$years_to_last_contact <- NA
df$height <- 2.54 * df$HGHT
df$weight <- 0.453592 * df$WGHT
df$bmi <- df$BMI
df$stage <- NA
df$metastatic <- NA
df$grade <- NA
# Format race/ethnicity information
df$race <- remap(df$RACE, race.map, default.value="unknown")
df$eth <- remap(df$ETHNCTY, eth.map, default.value=NA)
df$roe <- gsub("_NA$", "", apply(df[, c("race", "eth")], 1, paste, collapse="_"))
df$reported_race_or_ethnicity <- gsub("^unknown_", "", df$roe)
df$smoking_history
df[, c("MHSMKSTS", "MHSMKYRS")]
(df$MHSMKSTS == "Yes" | df$MHSMKYRS > 0)
df$MHSMKSTS == "Yes"
table(df$MHSMKSTS == "Yes")
table(df$MHSMKYRS > 0)
table((df$MHSMKSTS == "Yes" | df$MHSMKYRS > 0))
as.integer(df$MHSMKSTS == "Yes" | df$MHSMKYRS > 0)
remap(df$MHSMKSTS, c("Yes" = 1, "No" = 0))
as.integer(remap(df$MHSMKSTS, c("Yes" = 1, "No" = 0)))
df$smoke <- as.integer(remap(df$MHSMKSTS, c("Yes" = 1, "No" = 0)))
df$smokeyears <- as.integer(df$MHSMKYRS)
apply(df[, c("smoke", "smokeyears")], 1, max, na.rm=T) > 0
as.integer(apply(df[, c("smoke", "smokeyears")], 1, max, na.rm=T) > 0)
table(df$smoke)
df$MHSMKSTS
length(df$MHSMKSTS)
as.integer(apply(df[, c("smoke", "smokeyears")], 1, max, na.rm=T) > 0)
is.na(as.integer(apply(df[, c("smoke", "smokeyears")], 1, max, na.rm=T) > 0))
any(is.na(as.integer(apply(df[, c("smoke", "smokeyears")], 1, max, na.rm=T) > 0)))
df$smokeyears <- as.integer(df$MHSMKYRS)
df$smokeyears
apply(df[, c("smoke", "smokeyears")], 1, max, na.rm=T)
df$smokemax <- apply(df[, c("smoke", "smokeyears")], 1, max, na.rm=T)
is.infinite(df$smokemax)
is.infinite(df$smokemax) <- NA
df$smokemax[which(is.infinite(df$smokemax))] <- NA
as.integer(df$smokemax > 0)
df$smoking_history <- as.integer(df$smokemax > 0)
table(as.character(df$smoking_history))
df$cancer_icd10 <- NA
df$original_dx <- NA
# Read data
df <- read.table(tsv.in, sep="\t", comment.char="#", quote="", header=T,
blank.lines.skip=T, check.names=F, fill=T,
na.strings=c("", "NA"))
# Reformat simple columns
df$Sample <- df$SUBJID
df$Cohort <- "gtex"
df$reported_sex <- remap(df$SEX, sex.map, default.value=NA)
df$age_at_last_contact <- df$age <- as.numeric(df$AGE)
df$birth_year <- NA
df$vital_status <- 0
df$years_to_last_contact <- NA
df$height <- 2.54 * df$HGHT
df$weight <- 0.453592 * df$WGHT
df$bmi <- df$BMI
df$stage <- NA
df$metastatic <- NA
df$grade <- NA
df$cancer_icd10 <- NA
df$original_dx <- NA
# Format race/ethnicity information
df$race <- remap(df$RACE, race.map, default.value="unknown")
df$eth <- remap(df$ETHNCTY, eth.map, default.value=NA)
df$roe <- gsub("_NA$", "", apply(df[, c("race", "eth")], 1, paste, collapse="_"))
df$reported_race_or_ethnicity <- gsub("^unknown_", "", df$roe)
# Infer cancer status
# Get smoking history
df$smoke <- as.integer(remap(df$MHSMKSTS, c("Yes" = 1, "No" = 0)))
df$smokeyears <- as.integer(df$MHSMKYRS)
df$smokemax <- apply(df[, c("smoke", "smokeyears")], 1, max, na.rm=T)
df$smokemax[which(is.infinite(df$smokemax))] <- NA
df$smoking_history <- as.integer(df$smokemax > 0)
keep.cols <- c("Sample", "Cohort", "reported_sex", "reported_race_or_ethnicity",
"age", "birth_year", "vital_status", "age_at_last_contact",
"years_to_last_contact", "height", "weight", "bmi", "cancer",
"stage", "metastatic", "grade", "smoking_history", "cancer_icd10",
"original_dx")
df[, keep.cols]
df$MHCANCERC
table(df$MHCANCERC)
# Infer cancer status
df$cancer <- "control"
table(df$MHCANCER5)
df$cancer[which(df$MHCANCERC == 1 | df$MHCANCER5 == 1)] <- "other"
table(df$cancer)
cancer.idxs <- which(df$MHCANCERC == 1 | df$MHCANCER5 == 1)
df$stage[cancer.idxs] <- "unknown"
df$metastatic[cancer.idxs] <- "unknown"
df$grade[cancer.idxs] <- "unknown"
##################
# Data Functions #
##################
# Load & clean subject phenotype information
load.phenotypes <- function(tsv.in){
# Read data
df <- read.table(tsv.in, sep="\t", comment.char="#", quote="", header=T,
blank.lines.skip=T, check.names=F, fill=T,
na.strings=c("", "NA"))
# Reformat simple columns
df$Sample <- df$SUBJID
df$Cohort <- "gtex"
df$reported_sex <- remap(df$SEX, sex.map, default.value=NA)
df$age_at_last_contact <- df$age <- as.numeric(df$AGE)
df$birth_year <- NA
df$vital_status <- 0
df$years_to_last_contact <- NA
df$height <- 2.54 * df$HGHT
df$weight <- 0.453592 * df$WGHT
df$bmi <- df$BMI
df$stage <- NA
df$metastatic <- NA
df$grade <- NA
df$cancer_icd10 <- NA
df$original_dx <- NA
# Format race/ethnicity information
df$race <- remap(df$RACE, race.map, default.value="unknown")
df$eth <- remap(df$ETHNCTY, eth.map, default.value=NA)
df$roe <- gsub("_NA$", "", apply(df[, c("race", "eth")], 1, paste, collapse="_"))
df$reported_race_or_ethnicity <- gsub("^unknown_", "", df$roe)
# Infer cancer status
df$cancer <- "control"
cancer.idxs <- which(df$MHCANCERC == 1 | df$MHCANCER5 == 1)
df$cancer[cancer.idxs] <- "other"
df$stage[cancer.idxs] <- "unknown"
df$metastatic[cancer.idxs] <- "unknown"
df$grade[cancer.idxs] <- "unknown"
# Get smoking history
df$smoke <- as.integer(remap(df$MHSMKSTS, c("Yes" = 1, "No" = 0)))
df$smokeyears <- as.integer(df$MHSMKYRS)
df$smokemax <- apply(df[, c("smoke", "smokeyears")], 1, max, na.rm=T)
df$smokemax[which(is.infinite(df$smokemax))] <- NA
df$smoking_history <- as.integer(df$smokemax > 0)
# Return only relevant columns
keep.cols <- c("Sample", "Cohort", "reported_sex", "reported_race_or_ethnicity",
"age", "birth_year", "vital_status", "age_at_last_contact",
"years_to_last_contact", "height", "weight", "bmi", "cancer",
"stage", "metastatic", "grade", "smoking_history", "cancer_icd10",
"original_dx")
df[, keep.cols]
}
# Load and clean phenotype data
df <- load.phenotypes(args$phenotypes_tsv)
head(df)
df$smoking_history
# DEV:
args <- list("phenotypes_tsv" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/gtex/dbgap_phenotypes/phs000424.v9.pht002742.v9.p2.c1.GTEx_Subject_Phenotypes.GRU.txt.gz",
"sample_attributes_tsv" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/gtex/x_Analysis_2021-02-11_v9_Annotations_SampleAttributesDS.txt",
"out_tsv" = "~/scratch/gtex.pheno.dev.tsv")
##################
# Data Functions #
##################
# Load & clean subject phenotype information
load.phenotypes <- function(tsv.in){
# Read data
df <- read.table(tsv.in, sep="\t", comment.char="#", quote="", header=T,
blank.lines.skip=T, check.names=F, fill=T,
na.strings=c("", "NA"))
# Reformat simple columns
df$Sample <- df$SUBJID
df$Cohort <- "gtex"
df$reported_sex <- remap(df$SEX, sex.map, default.value=NA)
df$age_at_last_contact <- df$age <- as.numeric(df$AGE)
df$birth_year <- NA
df$vital_status <- 0
df$years_to_last_contact <- NA
df$height <- 2.54 * df$HGHT
df$weight <- 0.453592 * df$WGHT
df$bmi <- df$BMI
df$stage <- NA
df$metastatic <- NA
df$grade <- NA
df$cancer_icd10 <- NA
df$original_dx <- NA
df$wgs_tissue <- "unknown"
# Format race/ethnicity information
df$race <- remap(df$RACE, race.map, default.value="unknown")
df$eth <- remap(df$ETHNCTY, eth.map, default.value=NA)
df$roe <- gsub("_NA$", "", apply(df[, c("race", "eth")], 1, paste, collapse="_"))
df$reported_race_or_ethnicity <- gsub("^unknown_", "", df$roe)
# Infer cancer status
df$cancer <- "control"
cancer.idxs <- which(df$MHCANCERC == 1 | df$MHCANCER5 == 1)
df$cancer[cancer.idxs] <- "other"
df$stage[cancer.idxs] <- "unknown"
df$metastatic[cancer.idxs] <- "unknown"
df$grade[cancer.idxs] <- "unknown"
# Get smoking history
df$smoke <- as.integer(remap(df$MHSMKSTS, c("Yes" = 1, "No" = 0)))
df$smokeyears <- as.integer(df$MHSMKYRS)
df$smokemax <- apply(df[, c("smoke", "smokeyears")], 1, max, na.rm=T)
df$smokemax[which(is.infinite(df$smokemax))] <- NA
df$smoking_history <- as.integer(df$smokemax > 0)
# Return only relevant columns
keep.cols <- c("Sample", "Cohort", "reported_sex", "reported_race_or_ethnicity",
"age", "birth_year", "vital_status", "age_at_last_contact",
"years_to_last_contact", "height", "weight", "bmi", "cancer",
"stage", "metastatic", "grade", "smoking_history", "cancer_icd10",
"original_dx", "wgs_tissue")
df[, keep.cols]
}
# Load and clean phenotype data
df <- load.phenotypes(args$phenotypes_tsv)
head(df)
table(df$cancer)
tsv.in <- args$sample_attributes_tsv
# Read sample metadata
s.df <- read.table(tsv.in, header=T, sep="\t", quote="")
# DEV:
args <- list("phenotypes_tsv" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/gtex/dbgap_phenotypes/phs000424.v9.pht002742.v9.p2.c1.GTEx_Subject_Phenotypes.GRU.txt.gz",
"sample_attributes_tsv" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/gtex/GTEx_Analysis_2021-02-11_v9_Annotations_SampleAttributesDS.txt",
"out_tsv" = "~/scratch/gtex.pheno.dev.tsv")
tsv.in <- args$sample_attributes_tsv
# Read sample metadata
s.df <- read.table(tsv.in, header=T, sep="\t", quote="")
head(s.df)
table(s.df$ANALYTE_TYPE)
df$SMGEBTCHT
s.df$SMGEBTCHT
table(s.df$SMGEBTCHT)
# Subset to DNA used for WGS
grepl("WGS", s.df$SMGEBTCHT)
# Subset to DNA used for WGS
s.df[which(grepl("WGS", s.df$SMGEBTCHT)), ]
# Subset to DNA used for WGS
s.df <- s.df[which(grepl("WGS", s.df$SMGEBTCHT)), ]
nrow(s.df)
head(s.df)
s.df$SMTS
table(s.df$SMTS)
df$SMMTRLTP
head(s.df)
s.df$SMMTRLTP
table(s.df$SMMTRLTP)
# Read sample metadata
s.df <- read.table(tsv.in, header=T, sep="\t", quote="")
# Subset to DNA used for WGS
s.df <- s.df[which(grepl("WGS", s.df$SMGEBTCHT)
& grepl("DNA", s.df$SMMTRLTP)), ]
head(s.df)
# Infer donor ID
sapply(s.df$SAMPID, function(x){paste(unlist(strsplit(x, split="-"))[1:2], collapse="-")})
# Infer donor ID
s.df$Sample <- sapply(s.df$SAMPID, function(x){paste(unlist(strsplit(x, split="-"))[1:2], collapse="-")})
# Read sample metadata
s.df <- read.table(tsv.in, header=T, sep="\t", quote="")
# Infer donor ID
s.df$Sample <- sapply(s.df$SAMPID, function(x){
paste(unlist(strsplit(x, split="-"))[1:2], collapse="-")
})
# Subset to DNA used for WGS in samples present in df
s.df <- s.df[which(grepl("WGS", s.df$SMGEBTCHT)
& grepl("DNA", s.df$SMMTRLTP)
& s.df$Sample %in% df$Sample), ]
nrow(s.df)
head(s.df)
s.df$SMTS
table(s.df$SMTS)
# Prioritize blood over non-blood
s.df <- s.df[c(which(s.df$SMTS == "Blood")
which(s.df$SMTS != "Blood")), ]
# Prioritize blood over non-blood
s.df <- s.df[c(which(s.df$SMTS == "Blood"),
which(s.df$SMTS != "Blood")), ]
head(s.df)
table(s.df[, c("SMMTRLTP", "SMTS")])
s.df <- s.df[which(!duplicated(s.df$Sample)), ]
nrow(s.df)
s.df$SMTS
table(s.df$SMTS)
rownames(s.df) <- s.df$Sample
dna.map <- gsub("[ ]+", "_", tolower(s.df$SMTS))
names(dna.map) <- s.df$Sample
# Add DNA source
df$wgs_tissue <- remap(df$Sample, dna.map)
table(df$wgs_tissue)
# Add WGS DNA source
add.dna.source <- function(df, tsv.in){
# Read sample metadata
s.df <- read.table(tsv.in, header=T, sep="\t", quote="")
# Infer donor ID
s.df$Sample <- sapply(s.df$SAMPID, function(x){
paste(unlist(strsplit(x, split="-"))[1:2], collapse="-")
})
# Subset to DNA used for WGS in samples present in df
s.df <- s.df[which(grepl("WGS", s.df$SMGEBTCHT)
& grepl("DNA", s.df$SMMTRLTP)
& s.df$Sample %in% df$Sample), ]
# Deduplicate on donor ID while prioritizing blood over non-blood
s.df <- s.df[c(which(s.df$SMTS == "Blood"),
which(s.df$SMTS != "Blood")), ]
s.df <- s.df[which(!duplicated(s.df$Sample)), ]
dna.map <- gsub("[ ]+", "_", tolower(s.df$SMTS))
names(dna.map) <- s.df$Sample
# Add DNA source
df$wgs_tissue <- remap(df$Sample, dna.map)
return(df)
}
#!/usr/bin/env Rscript
# The Germline Genomics of Cancer (G2C)
# Copyright (c) 2024-Present, Ryan L. Collins and the Dana-Farber Cancer Institute
# Contact: Ryan Collins <Ryan_Collins@dfci.harvard.edu>
# Distributed under the terms of the GNU GPL v2.0
# Curate sample-level phenotype data downloaded from dbGaP for GTEx
#########
# Setup #
#########
# Load necessary libraries and constants
options(scipen=1000, stringsAsFactors=F)
require(argparse, quietly=TRUE)
require(G2C, quietly=TRUE)
G2C::load.constants("all")
# Declare constants used in variable parsing
sex.map <- c("1" = "male",
"2" = "female")
race.map <- c("1" = "asian",
"2" = "black",
"3" = "white",
"4" = "native_american")
eth.map <- c("0" = "not_hispanic",
"1" = "hispanic")
##################
# Data Functions #
##################
# Load & clean subject phenotype information
load.phenotypes <- function(tsv.in){
# Read data
df <- read.table(tsv.in, sep="\t", comment.char="#", quote="", header=T,
blank.lines.skip=T, check.names=F, fill=T,
na.strings=c("", "NA"))
# Reformat simple columns
df$Sample <- df$SUBJID
df$Cohort <- "gtex"
df$reported_sex <- remap(df$SEX, sex.map, default.value=NA)
df$age_at_last_contact <- df$age <- as.numeric(df$AGE)
df$birth_year <- NA
df$vital_status <- 0
df$years_to_last_contact <- NA
df$height <- 2.54 * df$HGHT
df$weight <- 0.453592 * df$WGHT
df$bmi <- df$BMI
df$stage <- NA
df$metastatic <- NA
df$grade <- NA
df$cancer_icd10 <- NA
df$original_dx <- NA
df$wgs_tissue <- "unknown"
# Format race/ethnicity information
df$race <- remap(df$RACE, race.map, default.value="unknown")
df$eth <- remap(df$ETHNCTY, eth.map, default.value=NA)
df$roe <- gsub("_NA$", "", apply(df[, c("race", "eth")], 1, paste, collapse="_"))
df$reported_race_or_ethnicity <- gsub("^unknown_", "", df$roe)
# Infer cancer status
df$cancer <- "control"
cancer.idxs <- which(df$MHCANCERC == 1 | df$MHCANCER5 == 1)
df$cancer[cancer.idxs] <- "other"
df$stage[cancer.idxs] <- "unknown"
df$metastatic[cancer.idxs] <- "unknown"
df$grade[cancer.idxs] <- "unknown"
# Get smoking history
df$smoke <- as.integer(remap(df$MHSMKSTS, c("Yes" = 1, "No" = 0)))
df$smokeyears <- as.integer(df$MHSMKYRS)
df$smokemax <- apply(df[, c("smoke", "smokeyears")], 1, max, na.rm=T)
df$smokemax[which(is.infinite(df$smokemax))] <- NA
df$smoking_history <- as.integer(df$smokemax > 0)
# Return only relevant columns
keep.cols <- c("Sample", "Cohort", "reported_sex", "reported_race_or_ethnicity",
"age", "birth_year", "vital_status", "age_at_last_contact",
"years_to_last_contact", "height", "weight", "bmi", "cancer",
"stage", "metastatic", "grade", "smoking_history", "cancer_icd10",
"original_dx", "wgs_tissue")
df[, keep.cols]
}
# Add WGS DNA source
add.dna.source <- function(df, tsv.in){
# Read sample metadata
s.df <- read.table(tsv.in, header=T, sep="\t", quote="")
# Infer donor ID
s.df$Sample <- sapply(s.df$SAMPID, function(x){
paste(unlist(strsplit(x, split="-"))[1:2], collapse="-")
})
# Subset to DNA used for WGS in samples present in df
s.df <- s.df[which(grepl("WGS", s.df$SMGEBTCHT)
& grepl("DNA", s.df$SMMTRLTP)
& s.df$Sample %in% df$Sample), ]
# Deduplicate on donor ID while prioritizing blood over non-blood
s.df <- s.df[c(which(s.df$SMTS == "Blood"),
which(s.df$SMTS != "Blood")), ]
s.df <- s.df[which(!duplicated(s.df$Sample)), ]
dna.map <- gsub("[ ]+", "_", tolower(s.df$SMTS))
names(dna.map) <- s.df$Sample
# Add DNA source
df$wgs_tissue <- remap(df$Sample, dna.map)
return(df)
}
# DEV:
args <- list("phenotypes_tsv" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/gtex/dbgap_phenotypes/phs000424.v9.pht002742.v9.p2.c1.GTEx_Subject_Phenotypes.GRU.txt.gz",
"sample_attributes_tsv" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/gtex/GTEx_Analysis_2021-02-11_v9_Annotations_SampleAttributesDS.txt",
"out_tsv" = "~/scratch/gtex.pheno.dev.tsv")
# Load and clean phenotype data
df <- load.phenotypes(args$phenotypes_tsv)
# Add DNA source
if(!is.null(args$sample_attributes_tsv)){
df <- add.dna.source(df, args$sample_attributes_tsv)
}
# Write to --out-tsv
col.order <- c("Sample", "Cohort", "reported_sex", "reported_race_or_ethnicity",
"age", "birth_year", "vital_status", "age_at_last_contact",
"years_to_last_contact", "height", "weight", "bmi", "cancer",
"stage", "metastatic", "grade", "smoking_history",
"cancer_icd10", "original_dx", "wgs_tissue")
write.table(df[, col.order], args$out_tsv, col.names=T, row.names=F, sep="\t", quote=F)
PedSV::load.constants("colors")
cancer.colors
# DEV:
args <- list("supp_table_1_tsv" = "~/Desktop/Collins/VanAllen/jackie_younglung/NatGenet_LCINS/NatGenet_LCINS_phenotypes/LCINS.supp_table1.tsv",
"out_tsv" = "~/scratch/mesa.pheno.dev.tsv")
tsv.in <- args$supp_table_1_tsv
# Read data
df <- read.table(tsv.in, header=T, sep="\t", quote="")
head(df)
# Remap simple columns
df$Sample <- df$Subject
df$Cohort <- "lcins"
df$reported_sex <- tolower(df$gender)
table(df$reported_sex)
head(df)
# Per study metadata, effectively all samples are caucasian/European
# Make the blanket assumption that all samples are EUR, which will be
# updated in a second function based on dbGaP phenotype information (limited)
df$reported_race_or_ethnicity <- "white"
head(df)
df$age <- as.numeric(df$age_at_diagnosis)
df$vital_status <- abs(1-df$death)
table(df$vital_status)
df$age_at_last_contact <- df$age + (df$survival_months / 12)
df$vital_status <- abs(1-df$death)
df$age_at_last_contact <- df$age + (df$survival_months / 12)
df$years_to_last_contact <- df$survival_months / 12
hist(df$age_at_last_contact)
df$years_to_last_contact
hist(df$years_to_last_contact)
head(df)
