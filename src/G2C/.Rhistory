# Curate stage and metastatic status
stage.cols <- c("donor_tumour_stage_at_diagnosis_supplemental",
"donor_tumour_stage_at_diagnosis")
df[, c("stage", "metastatic")] <- t(apply(df[, stage.cols], 1, function(v){
# Collate & clean all available info
for(delim in c("/", ",", "_", " OR ", "-")){
v <- as.character(unlist(sapply(toupper(v), strsplit, split=delim)))
}
v <- sub("( )+$", "", sub("^( )+", "", sub(")", "", sub("(", "", v, fixed=T), fixed=T)))
v <- remap(v, stage.map)
# Parse stage info
# First, check if any obvious stage is reported (after remapping, above)
met <- stage <- "unknown"
obvi.stage <- intersect(c("IV", "III", "II", "I", "0"), v)
if(length(obvi.stage) > 0){
stage <- obvi.stage[1]
met <- if(stage == "IV"){1}else{0}
}else{
# Otherwise, check if TNM stage is reported, and use T & M to approximate stage
tnm.v <- gsub("[A-L|O-S|U-Z]", "", v[grep("T[0-4]", v)])
if(length(tnm.v) > 0){
# Check if M term is included
m.v <- tnm.v[grep("M[0-9]", tnm.v)]
if(length(m.v) > 0){
met <- sort(sapply(m.v, function(mk){
parts <- sub("[A-Z]", "", unlist(strsplit(mk, split="M")))
as.numeric(parts[length(parts)])
}), decreasing=TRUE)[1]
if(met == 1){stage <- "IV"}
}
# Check if T term is included
m.t <- tnm.v[grep("T[0-9]", tnm.v)]
if(length(m.t) > 0){
stage <- remap(sort(sapply(m.t, function(tk){
parts <- as.numeric(unlist(strsplit(tk, split="[A-Z]")))
parts[which(!is.na(parts))][1]
}), decreasing=TRUE)[1], stage.map, default.value="unknown")
if(stage == "IV"){met <- 1}
}
}
}
c(stage, met)
}))
return(df)
}
# Annotate cancer diagnoses and G2C cancer types per sample
# This requires a three-column .tsv input with ICGC project code,
# description, and G2C cancer type. This was sourced from:
# http://www.innovebioinfo.com/Database/SMDB/sample_file/ICGC.html
# https://github.com/SimonHensel/health-data-lake?tab=readme-ov-file
annotate.cancers <- function(df, tsv.in){
# Read cancer map
c.map <- read.table(tsv.in, header=T, sep="\t")
colnames(c.map)[2] <- "original_dx"
c.map$original_dx <- tolower(c.map$original_dx)
# Left outer join to map cancers to project IDs
merge(df, c.map, all.x=T, all.y=F, sort=F)
}
# Load main donor table
df <- load.donors(args$donors_tsv)
# Annotate with cancer diagnosis and G2C cancer
df <- annotate.cancers(df, args$project_cancer_map)
table(df$stage)
table(df$metastatic)
# Write to --out-tsv
col.order <- c("Sample", "Cohort", "reported_sex", "reported_race_or_ethnicity",
"age", "birth_year", "vital_status", "age_at_last_contact",
"years_to_last_contact", "height", "weight", "bmi", "cancer",
"stage", "metastatic", "grade", "smoking_history",
"cancer_icd10", "original_dx", "wgs_tissue")
setdiff(col.order, colnames(df))
# DEV:
args <- list("donors_tsv" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/icgc/icgc_wgs_download_may26_2023/icgc_donor_metadata_release_28_may_2023/donor.all_projects.tsv.gz",
"project_cancer_map" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/icgc/icgc_project_to_g2c_map.tsv",
"specimen_tsv" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/icgc/icgc_wgs_download_may26_2023/icgc_donor_metadata_release_28_may_2023/specimen.all_projects.tsv.gz",
"out_tsv" = "~/scratch/icgc.pheno.dev.tsv")
tsv.in <- args$specimen_tsv
# Read specimen.tsv
spec <- read.table(tsv.in, header=T, sep="\t")
head(spec)
apply(spec[, c("specimen_type", "specimen_type_other")], 1,
function(v){any(grepl("normal", v, ignore.case=T))})
norm.idxs <- apply(spec[, c("specimen_type", "specimen_type_other")], 1,
function(v){any(grepl("normal", v, ignore.case=T))})
spec <- spec[norm.idxs, ]
head(spec)
table(spec$specimen_type)
# Read specimen.tsv and subset to normal samples
spec <- read.table(tsv.in, header=T, sep="\t")
# Read specimen.tsv and subset to normal samples
spec <- read.table(tsv.in, header=T, sep="\t")
norm.idxs <- apply(spec[, c("specimen_type", "specimen_type_other")], 1,
function(v){
any(grepl("normal", v, ignore.case=T)) &
!any(grepl("tumour", v, ignore.case=T))
})
spec <- spec[norm.idxs, ]
table(spec$specimen_type)
table(spec$specimen_type_other)
table(spec$specimen_type)
# Reformat specimen information
tolower(gsub("^Normal - ", "", spec$specimen_type))
# Reformat specimen information
tolower(gsub(" derived", "", gsub("^Normal - ", "", spec$specimen_type)))
# Reformat specimen information
spec$tissue <- tolower(gsub(" derived", "", gsub("^Normal - ", "", spec$specimen_type)))
table(spec$tissue)
spec$specimen_type_other[which(spec$tissue %in% c("other", "solid tissue", "tissue adjacent to primary"))]
table(spec$specimen_type_other[which(spec$tissue %in% c("other", "solid tissue", "tissue adjacent to primary"))])
table(spec$tissue)
spec$specimen_processing
table(spec$specimen_processing)
pres.map <- c("cryopreservation in dry ice (dead tissue)" = "cryopreserved postmortem",
"cryopreservation in liquid nitrogen (dead tissue)" = "cryopreserved postmortem",
"cryopreservation of live cells in liquid nitrogen" = "cryopreserved living",
"cryopreservation, other" = "cryopreserved",
"formalin fixed & paraffin embedded" = "FFPE",
"formalin fixed, unbuffered" = "fixed",
"other technique" = "")
table(remap(spec$specimen_processing, pres.map))
pres.map <- c("cryopreservation in dry ice (dead tissue)" = "frozen postmortem",
"cryopreservation in liquid nitrogen (dead tissue)" = "frozen postmortem",
"cryopreservation of live cells in liquid nitrogen" = "frozen living",
"cryopreservation, other" = "frozen",
"formalin fixed & paraffin embedded" = "FFPE",
"formalin fixed, unbuffered" = "fixed",
"other technique" = "")
table(remap(spec$specimen_processing, pres.map))
spec$storage <- remap(spec$specimen_processing, pres.map)
table(spec$specimen_processing_other[which(spec$storage == "")])
no.storage.idx <- which(spec$storage == "")
spec$specimen_processing_other[no.storage.idx]
table(spec$specimen_processing_other[no.storage.idx])
pres.supp.map <- c("All TCGA cases 1 or 2" = "",
"CD3+ tumor cell sorting" = "sorted fresh",
"Cryopreservation: liquid nitrogen, dry ice, or other" = "frozen",
"fresh into EDTA" = "fresh",
"Immersion in RNAlater" = "fresh",
"Known to be cryopreservation by method 1, 2, 3, or 4" = "frozen",
"Known to be cryopreservation by method 1, 2, or 4" = "frozen")
table(spec$specimen_processing_other[no.storage.idx])
table(remap(spec$specimen_processing_other[no.storage.idx], pres.sup.map))
pres.supp.map <- c("All TCGA cases 1 or 2" = "",
"CD3+ tumor cell sorting" = "sorted fresh",
"Cryopreservation: liquid nitrogen, dry ice, or other" = "frozen",
"fresh into EDTA" = "fresh",
"Immersion in RNAlater" = "fresh",
"Known to be cryopreservation by method 1, 2, 3, or 4" = "frozen",
"Known to be cryopreservation by method 1, 2, or 4" = "frozen")
table(remap(spec$specimen_processing_other[no.storage.idx], pres.supp.map))
spec$storage[no.storage.idx] <- remap(spec$specimen_processing_other[no.storage.idx],
pres.supp.map)
table(spec$storage)
table(spec$tissue)
no.tissue.idx <- which(spec$tissue %in% c("ebv immortalized", "other", "solid tissue", "tissue adjacent to primary"))
table(spec$specimen_type_other[no.tissue.idx])
as.data.frame(sort(table(spec$specimen_type_other[no.tissue.idx])))
spec$tissue_backup <- NA
tissue.supp.map <- c("Non-tumor liver" = "liver",
"non tumor liver" = "liver",
"Tonsille" = "tonsil",
"Saliva" = "saliva",
"cerebellum" = "cerebellum",
"ENDOMETRIUM" = "endometrium",
"stomach" = "stomach",
"SKIN" = "skin",
"Buccal Cell Normal" = "buccal cells",
"spleen" = "spleen",
"bone marrow" = "bone marrow",
"skin" = "skin",
"esophagus" = "esophagus",
"bone" = "bone")
remap(spec$specimen_type_other[no.tissue.idx], tissue.supp.map, default.value=NA)
table(remap(spec$specimen_type_other[no.tissue.idx], tissue.supp.map, default.value=NA))
spec$tissue_backup[no.tissue.idx] <-
remap(spec$specimen_type_other[no.tissue.idx], tissue.supp.map, default.value=NA)
spec[, c("tissue_backup", "tissue")]
spec$final_tissue <- apply(spec[, c("tissue_backup", "tissue")], 1, function(v){
head(v[which(!is.na(v))], 1)
})
table(spec$final_tissue)
tissue.map <- tolower(gsub(" ", "_", apply(spec[, c("storage", "final_tissue")], 1, paste)))
table(tissue.map)
tissue.map <- tolower(gsub(" ", "_", apply(spec[, c("storage", "final_tissue")], 1, paste, collapse=" ")))
table(tissue.map)
tissue.map <- apply(spec[, c("storage", "final_tissue")], 1, paste, collapse=" "))
tissue.map <- apply(spec[, c("storage", "final_tissue")], 1, paste, collapse=" ")
tissue.map <- gsub("^_", "", tolower(gsub(" ", "_", tissue.map)))
as.data.frame(sort(table(tissue.map)))
head(spec)
spec[1, ]
names(tissue.map) <- spec$icgc_donor_id
# Map specimen info onto dataframe
df$wgs_tissue <- remap(df$Sample, tissue.map, default.value="unknown")
as.data.frame(sort(table(df$wgs_tissue)))
# Annotate DNA source tissue
annotate.tissue <- function(df, tsv.in){
# Read specimen.tsv and subset to normal samples
spec <- read.table(tsv.in, header=T, sep="\t")
norm.idxs <- apply(spec[, c("specimen_type", "specimen_type_other")], 1,
function(v){
any(grepl("normal", v, ignore.case=T)) &
!any(grepl("tumour", v, ignore.case=T))
})
spec <- spec[norm.idxs, ]
# Reformat specimen information
spec$tissue <- tolower(gsub(" derived", "", gsub("^Normal - ", "", spec$specimen_type)))
no.tissue.idx <- which(spec$tissue %in% c("ebv immortalized", "other", "solid tissue",
"tissue adjacent to primary"))
spec$tissue_backup <- NA
spec$tissue_backup[no.tissue.idx] <-
remap(spec$specimen_type_other[no.tissue.idx], tissue.supp.map, default.value=NA)
spec$final_tissue <- apply(spec[, c("tissue_backup", "tissue")], 1, function(v){
head(v[which(!is.na(v))], 1)
})
spec$storage <- remap(spec$specimen_processing, pres.map)
no.storage.idx <- which(spec$storage == "")
spec$storage[no.storage.idx] <- remap(spec$specimen_processing_other[no.storage.idx],
pres.supp.map)
tissue.map <- apply(spec[, c("storage", "final_tissue")], 1, paste, collapse=" ")
tissue.map <- gsub("^_", "", tolower(gsub(" ", "_", tissue.map)))
names(tissue.map) <- spec$icgc_donor_id
# Map specimen info onto dataframe
df$wgs_tissue <- remap(df$Sample, tissue.map, default.value="unknown")
return(df)
}
# Load main donor table
df <- load.donors(args$donors_tsv)
# Annotate with cancer diagnosis and G2C cancer
df <- annotate.cancers(df, args$project_cancer_map)
# Annotate DNA tissue
df <- annotate.tissue(df, args$specimen_tsv)
# DEV:
args <- list("donors_tsv" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/icgc/icgc_wgs_download_may26_2023/icgc_donor_metadata_release_28_may_2023/donor.all_projects.tsv.gz",
"project_cancer_map" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/icgc/icgc_project_to_g2c_map.tsv",
"specimen_tsv" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/icgc/icgc_wgs_download_may26_2023/icgc_donor_metadata_release_28_may_2023/specimen.all_projects.tsv.gz",
"exposure_tsv" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/icgc/icgc_wgs_download_may26_2023/icgc_donor_metadata_release_28_may_2023/donor_exposure.all_projects.tsv.gz",
"out_tsv" = "~/scratch/icgc.pheno.dev.tsv")
# DEV:
args <- list("donors_tsv" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/icgc/icgc_wgs_download_may26_2023/icgc_donor_metadata_release_28_may_2023/donor.all_projects.tsv.gz",
"project_cancer_map" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/icgc/icgc_project_to_g2c_map.tsv",
"specimen_tsv" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/icgc/icgc_wgs_download_may26_2023/icgc_donor_metadata_release_28_may_2023/specimen.all_projects.tsv.gz",
"exposure_tsv" = "~/Desktop/Collins/VanAllen/pancancer_wgs/data_and_cohorts/icgc/icgc_wgs_download_may26_2023/icgc_donor_metadata_release_28_may_2023/donor_exposure.all_projects.tsv.gz",
"out_tsv" = "~/scratch/icgc.pheno.dev.tsv")
# Load main donor table
df <- load.donors(args$donors_tsv)
# Annotate with cancer diagnosis and G2C cancer
df <- annotate.cancers(df, args$project_cancer_map)
# Annotate DNA tissue
df <- annotate.tissue(df, args$specimen_tsv)
# Read exposure data
ex.df <- read.table(tsv.in, header=T, sep="\t")
head(ex.df)
tsv.in <- args$exposure_tsv
# Read exposure data
ex.df <- read.table(tsv.in, header=T, sep="\t")
head(ex.df)
# Build smoking map
ex.df$tobacco_smoking_intensity > 0
# Build smoking map
table(ex.df$tobacco_smoking_intensity > 0)
ex.df$tobacco_smoking_history_indicator
table(ex.df$tobacco_smoking_history_indicator)
nrow(ex.df)
# Build smoking map
smoke.cols <- c("Lifelong non-smoker (<100 cigarettes smoked in lifetime)",
"Smoking history not documented")
ex.df[, smoke.cols]
# Read cancer map
c.map <- read.table(tsv.in, header=T, sep="\t", quote="")
nrow(c.map)
# Read cancer map
c.map <- read.table(tsv.in, header=T, sep="\t", quote="")
colnames(c.map)[2] <- "original_dx"
c.map$original_dx <- tolower(c.map$original_dx)
# Left outer join to map cancers to project IDs
merge(df, c.map, all.x=T, all.y=F, sort=F)
# Annotate cancer diagnoses and G2C cancer types per sample
# This requires a three-column .tsv input with ICGC project code,
# description, and G2C cancer type. This was sourced from:
# http://www.innovebioinfo.com/Database/SMDB/sample_file/ICGC.html
# https://github.com/SimonHensel/health-data-lake?tab=readme-ov-file
annotate.cancers <- function(df, tsv.in){
# Read cancer map
c.map <- read.table(tsv.in, header=T, sep="\t", quote="")
colnames(c.map)[2] <- "original_dx"
c.map$original_dx <- tolower(c.map$original_dx)
# Left outer join to map cancers to project IDs
merge(df, c.map, all.x=T, all.y=F, sort=F)
}
# Read exposure data
ex.df <- read.table(tsv.in, header=T, sep="\t", quote="")
# Annotate cancer diagnoses and G2C cancer types per sample
# This requires a three-column .tsv input with ICGC project code,
# description, and G2C cancer type. This was sourced from:
# http://www.innovebioinfo.com/Database/SMDB/sample_file/ICGC.html
# https://github.com/SimonHensel/health-data-lake?tab=readme-ov-file
annotate.cancers <- function(df, tsv.in){
# Read cancer map
c.map <- read.table(tsv.in, header=T, sep="\t")
colnames(c.map)[2] <- "original_dx"
c.map$original_dx <- tolower(c.map$original_dx)
# Left outer join to map cancers to project IDs
merge(df, c.map, all.x=T, all.y=F, sort=F)
}
# Annotate DNA source tissue
annotate.tissue <- function(df, tsv.in){
# Read specimen.tsv and subset to normal samples
spec <- read.table(tsv.in, header=T, sep="\t")
norm.idxs <- apply(spec[, c("specimen_type", "specimen_type_other")], 1,
function(v){
any(grepl("normal", v, ignore.case=T)) &
!any(grepl("tumour", v, ignore.case=T))
})
spec <- spec[norm.idxs, ]
# Reformat specimen information
spec$tissue <- tolower(gsub(" derived", "", gsub("^Normal - ", "", spec$specimen_type)))
no.tissue.idx <- which(spec$tissue %in% c("ebv immortalized", "other", "solid tissue",
"tissue adjacent to primary"))
spec$tissue_backup <- NA
spec$tissue_backup[no.tissue.idx] <-
remap(spec$specimen_type_other[no.tissue.idx], tissue.supp.map, default.value=NA)
spec$final_tissue <- apply(spec[, c("tissue_backup", "tissue")], 1, function(v){
head(v[which(!is.na(v))], 1)
})
spec$storage <- remap(spec$specimen_processing, pres.map)
no.storage.idx <- which(spec$storage == "")
spec$storage[no.storage.idx] <- remap(spec$specimen_processing_other[no.storage.idx],
pres.supp.map)
tissue.map <- apply(spec[, c("storage", "final_tissue")], 1, paste, collapse=" ")
tissue.map <- gsub("^_", "", tolower(gsub(" ", "_", tissue.map)))
names(tissue.map) <- spec$icgc_donor_id
# Map specimen info onto dataframe
df$wgs_tissue <- remap(df$Sample, tissue.map, default.value="unknown")
return(df)
}
# Load main donor table
df <- load.donors(args$donors_tsv)
# Annotate with cancer diagnosis and G2C cancer
df <- annotate.cancers(df, args$project_cancer_map)
# Read exposure data
ex.df <- read.table(tsv.in, header=T, sep="\t", quote="")
# Build smoking map
smoke.cols <- c("tobacco_smoking_intensity", "tobacco_smoking_history_indicator")
smoke.cols
head(ex.df)
apply(ex.df[, smoke.cols], 1, function(v){
si <- as.numeric(v[1])
sh <- as.character(v[2])
if(si > 0){
return(1)
}else if(sh == "Lifelong non-smoker (<100 cigarettes smoked in lifetime)"){
return(0)
}else if(sh != "Smoking history not documented" & !is.na(sh) & sh != ""){
return(1)
}else{
return(NA)
}
})
# Build smoking map
smoke.cols <- c("tobacco_smoking_intensity", "tobacco_smoking_history_indicator")
apply(ex.df[, smoke.cols], 1, function(v){
si <- as.numeric(v[1])
sh <- as.character(v[2])
if(si > 0){
return(1)
}else if(sh == "Lifelong non-smoker (<100 cigarettes smoked in lifetime)"){
return(0)
}else if(sh != "Smoking history not documented" & !is.na(sh) & sh != ""){
return(1)
}else{
return(NA)
}
})
ex.df[, smoke.cols]
v <- ex.df[489, smoke.cols]
v <- as.vector(ex.df[489, smoke.cols])
si <- as.numeric(v[1])
sh <- as.character(v[2])
si
si > 0
apply(ex.df[, smoke.cols], 1, function(v){
si <- if(is.na(v[1])){-999}else{as.numeric(v[1])}
sh <- as.character(v[2])
if(si > 0){
return(1)
}else if(sh == "Lifelong non-smoker (<100 cigarettes smoked in lifetime)"){
return(0)
}else if(sh != "Smoking history not documented" & !is.na(sh) & sh != ""){
return(1)
}else{
return(NA)
}
})
smoke.map <- apply(ex.df[, smoke.cols], 1, function(v){
si <- if(is.na(v[1])){-999}else{as.numeric(v[1])}
sh <- as.character(v[2])
if(si > 0){
return(1)
}else if(sh == "Lifelong non-smoker (<100 cigarettes smoked in lifetime)"){
return(0)
}else if(sh != "Smoking history not documented" & !is.na(sh) & sh != ""){
return(1)
}else{
return(NA)
}
})
names(smoke.map) <- ex.df$icgc_donor_id
# Map smoking history
df$smoking_history <- remap(df$Sample, smoke.map, default.value=NA)
table(df$smoking_history)
# Annotate smoking history
annotate.smoking <- function(df, tsv.in){
# Read exposure data
ex.df <- read.table(tsv.in, header=T, sep="\t", quote="")
# Build smoking map
smoke.cols <- c("tobacco_smoking_intensity", "tobacco_smoking_history_indicator")
smoke.map <- apply(ex.df[, smoke.cols], 1, function(v){
si <- if(is.na(v[1])){-999}else{as.numeric(v[1])}
sh <- as.character(v[2])
if(si > 0){
return(1)
}else if(sh == "Lifelong non-smoker (<100 cigarettes smoked in lifetime)"){
return(0)
}else if(sh != "Smoking history not documented" & !is.na(sh) & sh != ""){
return(1)
}else{
return(NA)
}
})
names(smoke.map) <- ex.df$icgc_donor_id
# Map smoking history
df$smoking_history <- remap(df$Sample, smoke.map, default.value=NA)
return(df)
}
# Load main donor table
df <- load.donors(args$donors_tsv)
# Annotate with cancer diagnosis and G2C cancer
df <- annotate.cancers(df, args$project_cancer_map)
# Add smoking history
df <- annotate.smoking(df, args$exposure_tsv)
# Annotate DNA tissue
df <- annotate.tissue(df, args$specimen_tsv)
# Write to --out-tsv
col.order <- c("Sample", "Cohort", "reported_sex", "reported_race_or_ethnicity",
"age", "birth_year", "vital_status", "age_at_last_contact",
"years_to_last_contact", "height", "weight", "bmi", "cancer",
"stage", "metastatic", "grade", "smoking_history",
"cancer_icd10", "original_dx", "wgs_tissue")
head(df[, col.order])
x <- read.table("/private/var/folders/zj/59lpkx5926376cnm6l48d2x00000gp/T/tmp.CfibnTrArm/dfci-g2c.non_aou.phenos.tsv", header=T, sep="\t")
head(x)
nrow(x)
table(x$Cohort)
table(x$reported_sex)
x$reported_sex == "not reported"
which(x$reported_sex == "not reported")
x[which(x$reported_sex == "not reported"), ]
table(x$reported_race_or_ethnicity)
table(x$age)
hist(x$age)
hist(x$age, breaks=100)
x$birth_year
table(x$birth_year)
hist(x$birth_year)
x$vital_status
table(x$vital_status)
x$age_at_last_contact
hist(x$age_at_last_contact)
hist(x$years_to_last_contact)
hist(x$years_to_last_contact, breaks=100)
which(x$years_to_last_contact < 0)
x[which(x$years_to_last_contact < 0), ]
x$height
hist(x$height)
hist(x$weight)
hist(x$bmi)
table(x$cancer)
sort(table(x$cancer))
x[which(x$cancer == "ewing sarcoma"), ]
sort(table(x$cancer))
x[which(x$cancer == "oral cavity"), ]
sort(table(x$cancer))
cancer.nam
G2C::load.constants("names")
cancer.names
names(cancer.names)
x$Cohort[which(!x$cancer %in% names(cancer.names))]
table(x$Cohort[which(!x$cancer %in% names(cancer.names))])
x$cancer[which(x$Cohort == "ceph")]
x$cancer[which(x$Cohort == "mesa")]
table(x$cancer[which(x$Cohort == "mesa")])
x$cancer[which(x$Cohort == "mesa")]
x$cancer[which(x$Cohort == "mesa")] %in% names(cancer.names)
which(x$cancer[which(x$Cohort == "mesa")] %in% names(cancer.names))
which(!x$cancer[which(x$Cohort == "mesa")] %in% names(cancer.names))
which(!x$cancer %in% names(cancer.names))
intersect(which(!x$cancer %in% names(cancer.names)), which(x$Cohort == "mesa")
)
intersect(which(!x$cancer %in% names(cancer.names)), which(x$Cohort == "mesa"))
x$cancer[intersect(which(!x$cancer %in% names(cancer.names)), which(x$Cohort == "mesa"))]
table(x$stage)
table(x$metastatic)
table(x$grade)
which(x$grade == "3;GX")
x[which(x$grade == "3;GX"), ]
table(x$smoking_history)
table(x$cancer_icd10)
sort(table(x$cancer_icd10))
x$original_dx
x$wgs_tissue
sort(table(x$wgs_tissue))
